" 最小限のNeovim設定
" 基本的なエディタ設定
set encoding=utf-8
scriptencoding utf-8
set number relativenumber  " 行番号と相対行番号を表示
set wildmenu  " コマンドライン補完を拡張
set autoindent  " 自動インデント
set clipboard=unnamed  " システムのクリップボードを使用
set hls  " 検索結果をハイライト
set colorcolumn=80  " 80文字目にラインを表示
set backspace=indent,eol,start  " バックスペースの動作を調整
set cursorline  " カーソル行をハイライト

set t_Co=256  " 256色対応
let mapleader = ','  " リーダーキーを,に設定

" 折りたたみの設定
set foldmethod=indent
set foldlevel=99

" ペーストモードの設定（インデントの乱れを防ぐ）
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"
    function XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif

" コマンドラインをオフ
set cmdheight=0
set noshowmode
set laststatus=0

" タブとインデントの設定
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" プラグイン管理（vim-plug）
call plug#begin('~/.local/share/nvim/site/autoload/')

" カラースキーム（必須）
Plug '4513ECHO/vim-colors-hatsunemiku'

" Git差分表示（シンプル版）
Plug 'mhinz/vim-signify'

call plug#end()

" カラースキームの設定
colorscheme hatsunemiku
" 背景色の設定
autocmd ColorScheme * highlight Normal ctermbg=none
autocmd ColorScheme * highlight LineNr ctermbg=none
autocmd ColorScheme * highlight CursorLine ctermbg=none cterm=none
autocmd ColorScheme * highlight CursorLineNr ctermbg=none cterm=underline

" シンタックスハイライトを有効化
syntax enable
set textwidth=79
set colorcolumn=+1
highlight ColorColumn guibg=#202020 ctermbg=0

" Git差分表示の設定（シンプル）
let g:signify_sign_add = '+'
let g:signify_sign_delete = '-'
let g:signify_sign_change = '~'
let g:signify_sign_show_count = 0

" Claude Code連携設定
" ファイル競合回避のための自動リロード
set autoread
set updatetime=100
autocmd FocusGained,BufEnter * checktime

" 外部変更の警告
autocmd FileChangedShell * echo "Warning: File changed on disk"

" 保存前に外部変更をチェック
function! CheckFileChanged()
    if !&modified
        return
    endif
    let l:save_cursor = getpos('.')
    silent! checktime
    call setpos('.', l:save_cursor)
endfunction
autocmd BufWritePre * call CheckFileChanged()

" Claude Code用キーマップ
" ターミナルを素早く開く
nnoremap <leader>cc :split \| terminal claude<CR>
nnoremap <leader>ct :vsplit \| terminal claude<CR>

" ターミナルモードでのエスケープ
tnoremap <Esc> <C-\><C-n>

" ファイルパス・行番号コピー
nnoremap <leader>cp :let @+ = expand('%:p')<CR>:echo "Copied: " . expand('%:p')<CR>
nnoremap <leader>cl :let @+ = expand('%:p') . ':' . line('.')<CR>:echo "Copied: " . expand('%:p') . ':' . line('.')<CR>

" 選択範囲コピー
vnoremap <leader>cy "+y

" 読み取り専用モードトグル
nnoremap <leader>ro :set readonly!<CR>:echo "Read-only: " . (&readonly ? "ON" : "OFF")<CR>

" 差分表示
nnoremap <leader>df :DiffOrig<CR>
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

" Git関連
nnoremap <leader>gs :!git status<CR>
nnoremap <leader>gd :!git diff %<CR>
nnoremap <leader>gb :!git blame %<CR>

" プロジェクト管理
nnoremap <leader>pr :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>rm :e README.md<CR>